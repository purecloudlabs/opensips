enable_ubuntu_toolchain_test() {
	sudo apt install software-properties-common
	sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
}

setup_qemu() {
	ARCH1="${1}"
	ARCH2="${2}"
	sudo mkdir "/usr/${ARCH1}-linux-${ARCH2}/etc"
	sudo touch "/usr/${ARCH1}-linux-${ARCH2}/etc/ld.so.cache"
	sudo mkdir "/etc/qemu-binfmt"
	sudo ln -sf "/usr/${ARCH1}-linux-${ARCH2}" "/etc/qemu-binfmt/${ARCH1}"
}

COMPILER_VER=`echo "${COMPILER}" | sed -e 's|[a-z]*-||'`

case "${COMPILER}" in
gcc)
	export CC="${COMPILER}"
	PKGS="${PKGS} gcc g++"
	;;
gcc-i386-cross)
	export CC="gcc"
	CC_EXTRA_OPTS="-Werror -m32"
	MAKE_TGT="opensips"
	PRE_INSTALL_CMD="sudo dpkg --add-architecture i386"
	PKGS="${PKGS} gcc g++ libc6-dev:i386 libstdc++6:i386 lib32gcc-7-dev"
	;;
gcc-mips64-cross)
	MAKE_TGT="opensips"
	export CC="mips64-linux-gnuabi64-gcc"
	export AR="mips64-linux-gnuabi64-ar"
	export RANLIB="mips64-linux-gnuabi64-ranlib"
	POST_INSTALL_CMD="setup_qemu mips64 gnuabi64"
	PKGS="${PKGS} gcc-mips64-linux-gnuabi64 libc-dev-mips64-cross qemu-user-static"
	;;
gcc-arm32-cross)
	MAKE_TGT="opensips"
	export CC="arm-linux-gnueabihf-gcc"
	export AR="arm-linux-gnueabihf-ar"
	export RANLIB="arm-linux-gnueabihf-ranlib"
	POST_INSTALL_CMD="setup_qemu arm gnueabihf"
	PKGS="${PKGS} gcc-arm-linux-gnueabihf libc-dev-armhf-cross qemu-user-static"
	;;
gcc-arm64-cross)
	MAKE_TGT="opensips"
	export CC="aarch64-linux-gnu-gcc"
	export AR="aarch64-linux-gnu-ar"
	export RANLIB="aarch64-linux-gnu-ranlib"
	POST_INSTALL_CMD="setup_qemu aarch64 gnu"
	PKGS="${PKGS} gcc-aarch64-linux-gnu libc-dev-arm64-cross qemu-user-static"
	;;
clang)
	export CC="${COMPILER}"
	export AR="llvm-ar"
	export RANLIB="llvm-ranlib"
	export GCOV_CMD="llvm-cov gcov"
	PKGS="${PKGS} clang llvm-dev"
	;;
clang-i386-cross)
	export CC="clang"
	CC_EXTRA_OPTS="-Werror -m32"
	MAKE_TGT="opensips"
	PRE_INSTALL_CMD="sudo dpkg --add-architecture i386"
	PKGS="${PKGS} clang llvm-dev libc6-dev:i386 libstdc++6:i386 lib32gcc-7-dev"
	;;
gcc-*)
	export CC="${COMPILER}"
	export AR="gcc-ar-${COMPILER_VER}"
	export RANLIB="gcc-ranlib-${COMPILER_VER}"
	export GCOV_CMD="gcov-${COMPILER_VER}"
	PRE_INSTALL_CMD="enable_ubuntu_toolchain_test"
	PKGS="${PKGS} gcc-${COMPILER_VER} g++-${COMPILER_VER}"
	;;
clang-*)
	export CC="${COMPILER}"
	export AR="llvm-ar-${COMPILER_VER}"
	export RANLIB="llvm-ranlib-${COMPILER_VER}"
	export GCOV_CMD="llvm-cov-${COMPILER_VER} gcov"
	PKGS="${PKGS} clang-${COMPILER_VER} llvm-${COMPILER_VER}-dev libc++-${COMPILER_VER}-dev libc++abi-${COMPILER_VER}-dev"
	;;
*)
	printf 'COMPILER="%s" is unknown / unsupported\n' "${COMPILER}" 1>&2
	exit 1
	;;
esac
